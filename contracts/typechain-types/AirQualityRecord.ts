/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AirQualityRecordInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedSource"
      | "authorizedSources"
      | "batchRecordReadings"
      | "doesReadingExist"
      | "getAuthorizedSourcesCount"
      | "getReading"
      | "getReadingsByTimeRange"
      | "owner"
      | "readingExists"
      | "readings"
      | "readingsCount"
      | "recordReading"
      | "removeAuthorizedSource"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BatchReadingsRecorded" | "PollutionReadingRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedSource",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedSources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRecordReadings",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish[],
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "doesReadingExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSourcesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReading",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadingsByTimeRange",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readingExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readingsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordReading",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedSource",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRecordReadings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesReadingExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSourcesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReading", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReadingsByTimeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readingExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readingsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedSource",
    data: BytesLike
  ): Result;
}

export namespace BatchReadingsRecordedEvent {
  export type InputTuple = [
    batchSize: BigNumberish,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    batchSize: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    batchSize: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollutionReadingRecordedEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    readingId: string,
    pm10Value: BigNumberish,
    pm25Value: BigNumberish,
    category: string
  ];
  export type OutputTuple = [
    timestamp: bigint,
    readingId: string,
    pm10Value: bigint,
    pm25Value: bigint,
    category: string
  ];
  export interface OutputObject {
    timestamp: bigint;
    readingId: string;
    pm10Value: bigint;
    pm25Value: bigint;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirQualityRecord extends BaseContract {
  connect(runner?: ContractRunner | null): AirQualityRecord;
  waitForDeployment(): Promise<this>;

  interface: AirQualityRecordInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedSource: TypedContractMethod<
    [_source: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedSources: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  batchRecordReadings: TypedContractMethod<
    [
      _timestamps: BigNumberish[],
      _readingIds: string[],
      _pm10Values: BigNumberish[],
      _pm25Values: BigNumberish[],
      _locations: string[],
      _categories: string[]
    ],
    [void],
    "nonpayable"
  >;

  doesReadingExist: TypedContractMethod<
    [_readingId: string],
    [boolean],
    "view"
  >;

  getAuthorizedSourcesCount: TypedContractMethod<[], [bigint], "view">;

  getReading: TypedContractMethod<
    [_index: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string] & {
        timestamp: bigint;
        readingId: string;
        pm10Value: bigint;
        pm25Value: bigint;
        location: string;
        category: string;
      }
    ],
    "view"
  >;

  getReadingsByTimeRange: TypedContractMethod<
    [
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish
    ],
    [
      [bigint[], bigint[], string[], bigint[], bigint[]] & {
        indices: bigint[];
        timestamps: bigint[];
        readingIds: string[];
        pm10Values: bigint[];
        pm25Values: bigint[];
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  readingExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  readings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string] & {
        timestamp: bigint;
        readingId: string;
        pm10Value: bigint;
        pm25Value: bigint;
        location: string;
        category: string;
      }
    ],
    "view"
  >;

  readingsCount: TypedContractMethod<[], [bigint], "view">;

  recordReading: TypedContractMethod<
    [
      _timestamp: BigNumberish,
      _readingId: string,
      _pm10Value: BigNumberish,
      _pm25Value: BigNumberish,
      _location: string,
      _category: string
    ],
    [void],
    "nonpayable"
  >;

  removeAuthorizedSource: TypedContractMethod<
    [_source: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedSource"
  ): TypedContractMethod<[_source: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedSources"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchRecordReadings"
  ): TypedContractMethod<
    [
      _timestamps: BigNumberish[],
      _readingIds: string[],
      _pm10Values: BigNumberish[],
      _pm25Values: BigNumberish[],
      _locations: string[],
      _categories: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doesReadingExist"
  ): TypedContractMethod<[_readingId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAuthorizedSourcesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReading"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string] & {
        timestamp: bigint;
        readingId: string;
        pm10Value: bigint;
        pm25Value: bigint;
        location: string;
        category: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReadingsByTimeRange"
  ): TypedContractMethod<
    [
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _limit: BigNumberish,
      _offset: BigNumberish
    ],
    [
      [bigint[], bigint[], string[], bigint[], bigint[]] & {
        indices: bigint[];
        timestamps: bigint[];
        readingIds: string[];
        pm10Values: bigint[];
        pm25Values: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readingExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "readings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, string] & {
        timestamp: bigint;
        readingId: string;
        pm10Value: bigint;
        pm25Value: bigint;
        location: string;
        category: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "readingsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordReading"
  ): TypedContractMethod<
    [
      _timestamp: BigNumberish,
      _readingId: string,
      _pm10Value: BigNumberish,
      _pm25Value: BigNumberish,
      _location: string,
      _category: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedSource"
  ): TypedContractMethod<[_source: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BatchReadingsRecorded"
  ): TypedContractEvent<
    BatchReadingsRecordedEvent.InputTuple,
    BatchReadingsRecordedEvent.OutputTuple,
    BatchReadingsRecordedEvent.OutputObject
  >;
  getEvent(
    key: "PollutionReadingRecorded"
  ): TypedContractEvent<
    PollutionReadingRecordedEvent.InputTuple,
    PollutionReadingRecordedEvent.OutputTuple,
    PollutionReadingRecordedEvent.OutputObject
  >;

  filters: {
    "BatchReadingsRecorded(uint256,uint256,uint256)": TypedContractEvent<
      BatchReadingsRecordedEvent.InputTuple,
      BatchReadingsRecordedEvent.OutputTuple,
      BatchReadingsRecordedEvent.OutputObject
    >;
    BatchReadingsRecorded: TypedContractEvent<
      BatchReadingsRecordedEvent.InputTuple,
      BatchReadingsRecordedEvent.OutputTuple,
      BatchReadingsRecordedEvent.OutputObject
    >;

    "PollutionReadingRecorded(uint256,string,uint16,uint16,string)": TypedContractEvent<
      PollutionReadingRecordedEvent.InputTuple,
      PollutionReadingRecordedEvent.OutputTuple,
      PollutionReadingRecordedEvent.OutputObject
    >;
    PollutionReadingRecorded: TypedContractEvent<
      PollutionReadingRecordedEvent.InputTuple,
      PollutionReadingRecordedEvent.OutputTuple,
      PollutionReadingRecordedEvent.OutputObject
    >;
  };
}
